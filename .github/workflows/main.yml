
name: CD

on:
  push:
    branches: [ master ]

jobs:
  fetch_releases:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - uses: dschep/install-pipenv-action@v1
    - run: pipenv install
    - id: set-matrix
      run: |
        OUTPUT=$(pipenv run python fetch_releases.py --token ${{ secrets.TOKEN }})
        echo "::set-output name=matrix::{\"include\":[{\"PYTHON_VERSION\":\"3.8\",\"PIPENV_VERSION\":\"2020.6.2\"},{\"PYTHON_VERSION\":\"3.7\",\"PIPENV_VERSION\":\"2020.6.2\"}]}"
        echo $OUTPUT
  build-all-images:
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.fetch_releases.outputs.matrix)}}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: create Dockerfile from template
      run: |
        envsubst < Dockerfile.template > Dockerfile
        if [[ "$PYTHON_VERSION" == 3.8 && "$PIPENV_VERSION" == 2020.6.2 ]]; then
            echo ::set-env name=TAG::${{matrix.PYTHON_VERSION}}-${{matrix.PIPENV_VERSION}},latest
        else
            echo ::set-env name=TAG::${{matrix.PYTHON_VERSION}}-${{matrix.PIPENV_VERSION}}
        fi
      env:
        PYTHON_VERSION: ${{ matrix.PYTHON_VERSION }}
        PIPENV_VERSION: ${{ matrix.PIPENV_VERSION }}
    - name: Build and push Docker images
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: tolgaeren/pipenv-in-a-container
        tags: ${{ env.TAG }}
  